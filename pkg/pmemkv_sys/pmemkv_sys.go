// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Wed, 01 May 2019 10:58:26 CDT.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package pmemkv_sys

/*
#cgo LDFLAGS: -lpmemkv -ltbb
#include "libpmemkv.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// Start function as declared in https://google.com/search?q=.+kvengine_start
func Start(context unsafe.Pointer, engine string, config string, callback KVStartFailureCallback) *KVEngineSys {
	ccontext, _ := context, cgoAllocsUnknown
	cengine, _ := unpackPCharString(engine)
	cconfig, _ := unpackPCharString(config)
	ccallback, _ := callback.PassRef()
	__ret := C.kvengine_start(ccontext, cengine, cconfig, ccallback)
	__v := *(**KVEngineSys)(unsafe.Pointer(&__ret))
	return __v
}

// Stop function as declared in https://google.com/search?q=.+kvengine_stop
func Stop(kv *KVEngineSys) {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	C.kvengine_stop(ckv)
}

// All function as declared in https://google.com/search?q=.+kvengine_all
func All(kv *KVEngineSys, context unsafe.Pointer, c KVAllCallback) {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ccontext, _ := context, cgoAllocsUnknown
	cc, _ := c.PassRef()
	C.kvengine_all(ckv, ccontext, cc)
}

// AllAbove function as declared in https://google.com/search?q=.+kvengine_all_above
func AllAbove(kv *KVEngineSys, context unsafe.Pointer, kb int32, k string, c KVAllCallback) {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ccontext, _ := context, cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	cc, _ := c.PassRef()
	C.kvengine_all_above(ckv, ccontext, ckb, ck, cc)
}

// AllBelow function as declared in https://google.com/search?q=.+kvengine_all_below
func AllBelow(kv *KVEngineSys, context unsafe.Pointer, kb int32, k string, c KVAllCallback) {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ccontext, _ := context, cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	cc, _ := c.PassRef()
	C.kvengine_all_below(ckv, ccontext, ckb, ck, cc)
}

// AllBetween function as declared in https://google.com/search?q=.+kvengine_all_between
func AllBetween(kv *KVEngineSys, context unsafe.Pointer, kb1 int32, k1 string, kb2 int32, k2 string, c KVAllCallback) {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ccontext, _ := context, cgoAllocsUnknown
	ckb1, _ := (C.int32_t)(kb1), cgoAllocsUnknown
	ck1, _ := unpackPCharString(k1)
	ckb2, _ := (C.int32_t)(kb2), cgoAllocsUnknown
	ck2, _ := unpackPCharString(k2)
	cc, _ := c.PassRef()
	C.kvengine_all_between(ckv, ccontext, ckb1, ck1, ckb2, ck2, cc)
}

// Count function as declared in https://google.com/search?q=.+kvengine_count
func Count(kv *KVEngineSys) int {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	__ret := C.kvengine_count(ckv)
	__v := (int)(__ret)
	return __v
}

// CountAbove function as declared in https://google.com/search?q=.+kvengine_count_above
func CountAbove(kv *KVEngineSys, kb int32, k string) int {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	__ret := C.kvengine_count_above(ckv, ckb, ck)
	__v := (int)(__ret)
	return __v
}

// CountBelow function as declared in https://google.com/search?q=.+kvengine_count_below
func CountBelow(kv *KVEngineSys, kb int32, k string) int {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	__ret := C.kvengine_count_below(ckv, ckb, ck)
	__v := (int)(__ret)
	return __v
}

// CountBetween function as declared in https://google.com/search?q=.+kvengine_count_between
func CountBetween(kv *KVEngineSys, kb1 int32, k1 string, kb2 int32, k2 string) int {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ckb1, _ := (C.int32_t)(kb1), cgoAllocsUnknown
	ck1, _ := unpackPCharString(k1)
	ckb2, _ := (C.int32_t)(kb2), cgoAllocsUnknown
	ck2, _ := unpackPCharString(k2)
	__ret := C.kvengine_count_between(ckv, ckb1, ck1, ckb2, ck2)
	__v := (int)(__ret)
	return __v
}

// Each function as declared in https://google.com/search?q=.+kvengine_each
func Each(kv *KVEngineSys, context unsafe.Pointer, c KVEachCallback) {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ccontext, _ := context, cgoAllocsUnknown
	cc, _ := c.PassRef()
	C.kvengine_each(ckv, ccontext, cc)
}

// EachAbove function as declared in https://google.com/search?q=.+kvengine_each_above
func EachAbove(kv *KVEngineSys, context unsafe.Pointer, kb int32, k string, c KVEachCallback) {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ccontext, _ := context, cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	cc, _ := c.PassRef()
	C.kvengine_each_above(ckv, ccontext, ckb, ck, cc)
}

// EachBelow function as declared in https://google.com/search?q=.+kvengine_each_below
func EachBelow(kv *KVEngineSys, context unsafe.Pointer, kb int32, k string, c KVEachCallback) {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ccontext, _ := context, cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	cc, _ := c.PassRef()
	C.kvengine_each_below(ckv, ccontext, ckb, ck, cc)
}

// EachBetween function as declared in https://google.com/search?q=.+kvengine_each_between
func EachBetween(kv *KVEngineSys, context unsafe.Pointer, kb1 int32, k1 string, kb2 int32, k2 string, c KVEachCallback) {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ccontext, _ := context, cgoAllocsUnknown
	ckb1, _ := (C.int32_t)(kb1), cgoAllocsUnknown
	ck1, _ := unpackPCharString(k1)
	ckb2, _ := (C.int32_t)(kb2), cgoAllocsUnknown
	ck2, _ := unpackPCharString(k2)
	cc, _ := c.PassRef()
	C.kvengine_each_between(ckv, ccontext, ckb1, ck1, ckb2, ck2, cc)
}

// Exists function as declared in https://google.com/search?q=.+kvengine_exists
func Exists(kv *KVEngineSys, kb int32, k string) int8 {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	__ret := C.kvengine_exists(ckv, ckb, ck)
	__v := (int8)(__ret)
	return __v
}

// Get function as declared in https://google.com/search?q=.+kvengine_get
func Get(kv *KVEngineSys, context unsafe.Pointer, kb int32, k string, c KVGetCallback) {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ccontext, _ := context, cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	cc, _ := c.PassRef()
	C.kvengine_get(ckv, ccontext, ckb, ck, cc)
}

// GetCopy function as declared in https://google.com/search?q=.+kvengine_get_copy
func GetCopy(kv *KVEngineSys, kb int32, k string, maxvaluebytes int32, value *byte) int8 {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	cmaxvaluebytes, _ := (C.int32_t)(maxvaluebytes), cgoAllocsUnknown
	cvalue, _ := (*C.char)(unsafe.Pointer(value)), cgoAllocsUnknown
	__ret := C.kvengine_get_copy(ckv, ckb, ck, cmaxvaluebytes, cvalue)
	__v := (int8)(__ret)
	return __v
}

// Put function as declared in https://google.com/search?q=.+kvengine_put
func Put(kv *KVEngineSys, kb int32, k string, vb int32, v string) int8 {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	cvb, _ := (C.int32_t)(vb), cgoAllocsUnknown
	cv, _ := unpackPCharString(v)
	__ret := C.kvengine_put(ckv, ckb, ck, cvb, cv)
	__v := (int8)(__ret)
	return __v
}

// Remove function as declared in https://google.com/search?q=.+kvengine_remove
func Remove(kv *KVEngineSys, kb int32, k string) int8 {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	__ret := C.kvengine_remove(ckv, ckb, ck)
	__v := (int8)(__ret)
	return __v
}