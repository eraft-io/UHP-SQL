#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 170
#define YY_END_OF_BUFFER 171
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1170] =
    {   0,
        0,    0,  167,  167,    2,    2,  171,  169,    4,    4,
      169,  169,  158,  165,  158,  158,  162,  158,  158,  158,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  158,  167,  168,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  153,    0,    1,    0,
      160,  159,  162,  155,  154,  152,  156,  164,  164,  164,

      164,  164,  164,  124,  164,  125,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      126,  164,  164,  127,  128,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  129,  130,  131,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  132,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  157,  167,  166,    2,
        2,    2,    2,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  163,    0,  159,  112,  164,  113,  164,  164,
      114,  164,  115,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  136,  164,  164,  164,

      164,  164,  164,  164,  164,  164,  164,  116,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  117,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  118,  164,  164,  119,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  120,  164,  164,  121,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  122,  164,  164,  164,  164,  164,  164,
      164,  164,  123,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        0,  164,  164,  164,  164,  164,  164,  164,   83,  164,
       84,   46,   85,  164,  164,  164,   86,  164,  164,   87,
      142,  164,  164,  164,  164,  164,   89,  164,  164,  164,
       90,   91,  164,  164,  164,  164,  164,  164,  164,   92,
      164,  164,   93,   94,  164,  164,   95,  164,   96,  135,
      164,  164,  164,  164,  164,  164,   97,  164,   98,   99,
      100,  164,  102,  164,  103,  164,  164,  164,  164,  104,
      164,  164,  164,  164,  164,  105,  164,  164,   34,  164,
      164,  164,  164,  164,  164,  164,  106,  164,  164,  164,
      164,  107,  108,   32,  164,  145,  164,  164,  164,  164,

      164,  164,  164,  164,  164,  109,  164,  110,  164,  111,
      138,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,   63,   64,  164,   65,  164,  148,  164,
      164,  164,  164,  164,  164,  164,   66,  164,  164,  164,
      164,  164,   67,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  146,   68,  164,  164,   69,  164,  141,
      101,  164,   70,   71,  164,  164,  164,  164,   72,   73,
       74,   75,  164,  137,  164,  164,  164,   76,   77,  164,
      164,  164,  164,  164,   78,  164,  164,  164,  164,  164,
      164,   79,  164,  164,  164,  164,   80,  164,  164,  164,

       81,  164,  164,  164,  164,   82,  144,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,  164,   36,  164,  164,  164,   37,  150,

      164,   38,  164,  164,  164,  164,   39,  164,   40,  164,
       41,   42,   43,  164,   44,  164,  164,   47,   48,   49,
       50,   51,  164,  164,  164,   52,  134,  143,  164,  164,
       53,  164,  164,  164,   54,  164,  164,   55,  133,   56,
       57,  164,   58,  164,  164,  164,  164,   59,   60,   61,
       62,  164,  164,  164,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,   15,   16,   17,
      164,   18,   19,  164,  164,   33,   20,  164,  164,   21,
       22,   45,   23,  164,  164,  140,   24,  164,  164,   25,
       26,  164,  164,   27,  139,   28,  164,  164,  164,  164,
       29,   31,   35,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        0,  164,   88,  164,   10,   11,  164,  151,   12,  164,

       13,  149,  164,  164,  164,   14,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,   30,  164,    7,  164,    8,    9,  164,
        2,    2,    2,    2,    2,    2,    2,    2,    0,    5,
        6,  164,    2,    2,    2,    2,    0,  147,    2,    2,
        0,    2,    0,    2,    0,    2,    0,    2,    0,    2,
        0,    2,    0,    2,    0,    2,  161,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,    6,    6,   20,
       21,   22,    6,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        6,    1,    6,    6,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    6,   76,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[77] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1177] =
    {   0,
        0,    0,  720,  709,   76,    0,  688, 4686,  151,  153,
      647,    0, 4686, 4686,  149,  148,  160,  159,  643,  625,
      156,  156,  164,  162,  172,  223,  198,  211,  215,  151,
      168,  210,  255,  257,  263,  262,    0,  277,  307,  350,
      284,  221,  258,  171,  564,    0,  609,    0,  295,  308,
      586,  576,    0,    0,  331,  408,  419,  321,  542,  512,
      438,  514,  568,  620,  668,  720,  328,  426,  768,  329,
      311,  434,  500,  820,  868,  505,  421,  513,  918,  970,
      515,  570,  455,  423,  450,  351, 4686,  520, 4686,  512,
     1035, 1045, 1056, 4686, 4686, 4686, 4686,    0,  174,  282,

      336,  520,  296,  315,  557,    0,  345,  334,  568,  511,
      327,  611,  570,  345,  419,  421,  441,  444,  631,  469,
      515,  520,  542,  555,  560,  559,  563,  609,  578,  605,
        0,  618,  616,  665,  619,  628,  618,  643,  664,  685,
      650,  657,  667,  663,  669,  678,  690,  691,    0,  697,
      683,  704,  722,  722,  750,  726,  722,  728,  764,  724,
      725,  743,  773,  764,  774,  770,  769,  796,  777,  788,
      786,  787,  818,  822,  808,  828, 4686,    0, 4686,    0,
      389,    0,  512,    0,  499, 1066, 1076, 1087,    0,    0,
        0,    0,  826,  835,  856,  859,  913,  887,  872,  922,

      905,  961,  962, 1080,  957, 1081, 1133, 1085, 1119, 1083,
     1097, 1122, 1143, 1193, 1145, 1175, 1178,  959, 1196, 1187,
     1217, 1219, 1228, 1232, 1183, 1137, 1247, 1238, 1296, 1253,
     1257, 1270, 1281, 1306, 1331, 1335, 1298, 1350, 1346, 1349,
     1365, 1383, 1380, 1374, 1405, 1402, 1413, 1415, 1414, 1450,
     1454, 1448, 1469, 1478, 1480, 1502, 1508, 1513, 1524, 1389,
     1518, 1519, 1552, 1554, 1563, 1573, 1596, 1567, 1467, 1591,
     1602,    0, 4686,  498, 1667,    0,  825,    0,  833,  831,
        0,  852,    0,  880,  916,  908,  937, 1619,  963,  962,
      979, 1067, 1066, 1154, 1140, 1159, 1159, 1178, 1232, 1264,

     1315, 1288, 1292, 1278, 1339, 1333, 1360,    0, 1372, 1420,
     1426, 1425, 1450, 1452, 1465, 1509, 1527, 1570, 1578, 1590,
     1611, 1596, 1612, 1617, 1622, 1627, 1635, 1635, 1647, 1660,
     1662, 1663, 1649, 1657,    0, 1654, 1670, 1667, 1676, 1680,
     1675, 1676, 1663, 1665, 1665,    0, 1675, 1670, 1670, 1685,
     1686, 1692, 1682, 1683, 1687, 1692, 1705, 1699, 1713, 1710,
     1719, 1710, 1723,    0, 1706, 1710, 1712, 1722, 1719, 1716,
     1723, 1733,    0, 1725, 1736, 1725, 1728, 1743, 1731, 1726,
     1750, 1731, 1738, 1764, 1752, 1755,    0,  495, 1800, 1774,
     1778, 1779, 1793, 1796, 1802, 1811, 1808, 1817, 1832, 1833,

     1841, 1847, 1856, 1850, 1865, 1871, 1881, 1899, 1890, 1882,
     1907, 1916, 1920, 1915, 1941, 1932, 1933, 1949, 1958, 1966,
     1945, 1970, 1975, 1974, 1989, 2006, 2003, 2011, 2015, 2007,
     2032, 2040, 2041, 2057, 2046, 2065, 2069, 2074, 2080, 2090,
     2109, 2113, 2098, 2111, 2114, 2139, 2128, 2126, 2143, 2152,
     2154, 2164, 2178, 2169, 2180, 2183, 2197, 2206, 2202, 2188,
     2231, 2219, 2214, 2223, 2236, 2264, 2262, 2268, 2272, 2247,
     2273, 2290, 2301, 2316, 2302, 2314, 2313, 2318, 2326, 2327,
     2352, 2355, 2357, 2366, 2376, 2370, 2378, 2391, 2401, 2414,
     2409, 2420, 2422, 2439, 2452, 2444, 2460, 2465, 2470, 2468,

      491, 1799, 1802, 1799, 1837, 1874, 1964, 1981,    0, 2016,
        0,    0, 2022, 2036, 2093, 2107,    0, 2178, 2262, 2270,
        0, 2301, 2348, 2364, 2373, 2410, 2417, 2478, 2479, 2477,
        0,    0, 2482, 2483, 2480, 2483, 2508, 2510, 2509,    0,
     2498, 2518,    0,    0, 2520, 2507,    0, 2510,    0, 2508,
     2524, 2513, 2508, 2515, 2516, 2535,    0, 2523,    0,    0,
        0, 2517,    0, 2527,    0, 2535, 2524, 2539, 2531,    0,
     2549, 2550, 2539, 2545, 2552,    0, 2567, 2571,    0, 2560,
     2557, 2557, 2576, 2568, 2569, 2582,    0, 2581, 2578, 2583,
     2574,    0,    0, 2572, 2574,    0, 2591, 2582, 2576, 2597,

     2581, 2596, 2601, 2599, 2600,    0, 2590,    0, 2612,    0,
     2600,  474, 2617, 2622, 2626, 2627, 2632, 2651, 2636, 2638,
     2670, 2648, 2661, 2680, 2684, 2682, 2701, 2696, 2705, 2710,
     2718, 2715, 2739, 2736, 2734, 2749, 2772, 2767, 2784, 2770,
     2778, 2788, 2793, 2810, 2816, 2802, 2824, 2832, 2838, 2806,
     2842, 2860, 2850, 2847, 2856, 2868, 2881, 2878, 2884, 2886,
     2896, 2909, 2914, 2926, 2922, 2938, 2950, 2912, 2940, 2944,
     2948, 2966, 2981, 2980, 2982, 2983, 2984, 3005, 3014, 3022,
     3006, 3038, 3037, 3054, 3055, 3051, 3050, 3060, 3076, 3073,
     3104, 3105, 3106, 3114, 3108, 3110, 3129, 3140, 3142, 3159,

     3144, 3158, 3150, 3172, 3174, 3182, 3173, 3183, 3198, 3211,
     3216, 3213, 3222, 3217, 3232, 3246, 3241, 3256, 3247, 3265,
     3270, 3275,  442,    0,    0, 2619,    0, 2650,    0, 2699,
     2873, 2892, 2921, 2973, 2984, 3012,    0, 3014, 3078, 3094,
     3102, 3226,    0, 3253, 3256, 3269, 3280, 3281, 3267, 3271,
     3273, 3287, 3298,    0,    0, 3285, 3294,    0, 3302,    0,
        0, 3291,    0,    0, 3295, 3311, 3307, 3308,    0,    0,
        0,    0, 3319, 3306, 3329, 3323, 3314,    0,    0, 3330,
     3319, 3321, 3335, 3332,    0, 3343, 3344, 3342, 3328, 3345,
     3349, 3335, 3337, 3339, 3359, 3362,    0, 3360, 3365, 3365,

        0, 3355, 3377, 3365, 3379,    0,    0,  441, 3378, 3379,
     3383, 3388, 3389, 3393, 3394, 3412, 3397, 3428, 3427, 3423,
     3429, 3445, 3453, 3451, 3462, 3479, 3463, 3467, 3477, 3496,
     3512, 3495, 3507, 3520, 3529, 3531, 3533, 3530, 3541, 3546,
     3569, 3563, 3565, 3579, 3574, 3575, 3598, 3587, 3600, 3604,
     3603, 3615, 3637, 3628, 3633, 3638, 3641, 3643, 3652, 3677,
     3678, 3667, 3649, 3683, 3686, 3702, 3707, 3691, 3712, 3701,
     3735, 3740, 3745, 3726, 3757, 3770, 3761, 3776, 3779, 3778,
     3795, 3780, 3809, 3811, 3812, 3813, 3814, 3824, 3843, 3849,
     3830, 3846,  435, 3380,    0, 3410, 3466, 3476, 3511,    0,

     3575,    0, 3684, 3725, 3730, 3820,    0, 3851,    0, 3855,
        0,    0,    0, 3854,    0, 3855, 3850,    0,    0,    0,
        0,    0, 3854, 3868, 3878,    0, 3864,    0, 3875, 3887,
        0, 3869, 3885, 3866,    0, 3889, 3890, 3875, 3883,    0,
        0, 3891,    0, 3903, 3904, 3904, 3888,    0,    0,    0,
        0, 3891, 3904, 3900,  434, 3908, 3917, 3923, 3918, 3921,
     3940, 3919, 3942, 3951, 3953, 3974, 3975, 3977, 3983, 3993,
     3985, 4008, 3991, 3996, 4007, 4025, 4026, 4039, 4029, 4031,
     4037, 4041, 4042, 4047, 4050, 4060, 4083, 4065, 4081, 4082,
     4091, 4100, 4099, 4116, 4113, 4114, 4115, 4139, 4150, 4151,

     4153, 4149, 4152, 4181, 4182, 4187, 4193, 4205, 4191, 4204,
     4217, 4219, 4221, 4222, 4243, 4247,  429,    0,    0,    0,
     3920,    0,    0, 3952, 3961,    0,    0, 4105, 4102,    0,
        0,    0,    0, 4159, 4161,    0,    0, 4172, 4223,    0,
        0, 4211, 4249,    0,    0,    0, 4243, 4249, 4243, 4259,
        0,    0,    0,  404, 4260, 4271, 4273, 4275, 4276, 4277,
     4279, 4292, 4289, 4301, 4305, 4314, 4310, 4311, 4313, 4327,
     4344, 4343, 4335, 4345, 4346, 4367, 4368, 4376, 4384, 4400,
     4378, 4381, 4389, 4397, 4421, 4419, 4418, 4422, 4430, 4432,
      402, 4340,    0, 4360,    0,    0, 4370,    0,    0, 4400,

        0,    0, 4415, 4432, 4447,    0,  401, 4454, 4453, 4471,
     4455, 4463, 4472, 4476, 4484, 4495, 4485, 4489, 4497, 4526,
     4521, 4507,  397,    0, 4493,    0, 4492,    0,    0, 4518,
      396, 4529, 4530, 4538, 4547, 4539, 4543, 4562,  383,    0,
        0, 4542,  382, 4560, 4571, 4575,  376,    0,  342, 4581,
      333,  331,  303,  291,  278,  255,  250,  245,  243,  240,
      235,  221,  226,  197,  187,  173, 4686,    0, 4686, 4655,
     4660,  181, 4665, 4670, 4675, 4680
    } ;

static const flex_int16_t yy_def[1177] =
    {   0,
     1169,    1, 1170, 1170, 1169,    5, 1169, 1169, 1169, 1169,
     1169, 1171, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1169, 1173, 1169, 1174, 1174, 1169,
     1174, 1175, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1176, 1176,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1174, 1169, 1169, 1171, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1172, 1172, 1172,

     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1169, 1173, 1169, 1174,
     1174, 1174, 1175, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62, 1174, 1169, 1169, 1169, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,

     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1174, 1174, 1174,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

     1169, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,

     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1174,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1169, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,

     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1174,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1169, 1172, 1172, 1172, 1172, 1172, 1172, 1172,

     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1174,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1169, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1174,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1169, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,

     1172, 1172, 1172, 1172, 1172, 1172, 1174,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1169, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1174,   62,   62,   62,   62,   62,   62,   62, 1169, 1172,
     1172, 1172, 1174,   62,   62,   62, 1169, 1172, 1174,   62,
     1169, 1174, 1169, 1174, 1169, 1174, 1169, 1174, 1169, 1174,
     1169, 1174, 1169, 1174, 1169, 1174, 1169, 1174,    0, 1169,
     1169, 1169, 1169, 1169, 1169, 1169
    } ;

static const flex_int16_t yy_nxt[4763] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   37,   44,   37,    8,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   37,   44,   37,   45,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   58,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   77,   84,   77,   48,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   77,   84,
       77,   85,   86,   86,   86,   86,   89,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   90,   92,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   94,
       95,   99,  105,  100,  111,   98,  107,  136,  112,  101,
     1168,  102,  113,  108,  137,  103,  104,  176,  114,  276,

      109,  115,  106,  110, 1167,  116, 1166,  117,   99,  105,
      100,  111,  118,  107,  136,  112,  101,  119,  102,  113,
      108,  137,  103,  104,  176,  114,  276,  109,  115,  106,
      110,  126,  116,  128,  117, 1165,  138,  127, 1164,  118,
      139,  129,  131,  172,  119,  120,  140,  130,  132,  133,
      134,  173, 1163,  121, 1162,  135,  122, 1161,  126,  123,
      128, 1160,  124,  138,  127,  125, 1159,  139,  129,  131,
      172, 1158,  120,  140,  130,  132,  133,  134,  173,  144,
      121,  141,  135,  122,  152,  142,  123,  174,  175,  124,
      148,  143,  125,  145, 1157,  153,  181,   86,  149,  146,

      147,  154,  150,  155, 1156,  151,  144,  156,  141,   86,
       86,  152,  142,  157,  174,  175, 1155,  148,  143,  169,
      145,  170,  153,  277,  171,  149,  146,  147,  154,  150,
      155,  158,  151,  159,  156,  282,  160,  232,  184,  283,
      157,  189,  190,  161,  162, 1154,  169, 1153,  170,  185,
      277,  171,   86,   86,  193,  193,  289,  193,  158, 1152,
      159,  221,  282,  160,  232,  231,  283,  222,  296,  278,
      161,  162,  163,  297,  193,  193,  164,  279,  287,  165,
      166,  193,  193,  289,  193,  288,  167,  305,  221,  168,
      181,   86,  231, 1151,  222,  296,  278, 1149, 1147,  163,

      297,  193,  193,  164,  279,  287,  165,  166, 1143, 1139,
     1131, 1123,  288,  167,  305, 1107,  168,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  187,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  180,  180,
     1091,  180,  180,  180,  180,  180,  180,  193,  223,  271,
     1054, 1017,  193,  955,  893,  306,  224,  180,  180,  180,
      233,  307,  225,  194,  234,  195,  308,  193,  309,  193,
      235,  196,  193,  197,  193,  223,  271,  198,  199,  193,
      193,  193,  306,  224,  269,  270,  808,  233,  307,  225,
      194,  234,  195,  308,  193,  309,  193,  235,  196,  193,

      197,  193,  315,  723,  198,  199,  612,  193,  193,  501,
      388,  269,  270,  180,  180,  180,  387,  180,  180,  180,
      180,  180,  180,  274,  273,  272,  236,  247,  193,  315,
      237,  193,  192,  180,  180,  180,  238,  294,  248,  250,
      200,  193,  280,  251,  249,  281,  193,  295,  316,  252,
      264,  193,  265,  236,  247,  266,  317,  237,  193,  193,
      201,  193,  191,  238,  294,  248,  250,  200,  193,  280,
      251,  249,  281,  193,  295,  316,  252,  264,  193,  265,
      180,  318,  266,  317,  284,  285,  193,  201,  193,  180,
      202,  319,  267,  320,  193,  321,  193,  203,  286,  322,

      268,  290,  291,  292,  204,  293,  182,  205,  318,  303,
      304,  284,  285,  325,  193,  179,  193,  202,  319,  267,
      320,  193,  321,  193,  203,  286,  322,  268,  290,  291,
      292,  204,  293,  298,  205,  299,  303,  304,  300,  177,
      325,  193,  206,  193,  301,   97,  207,  326,  327,  323,
      208,  302,  324,  328,  333,  310,  209,  311,  334,  210,
      298,  312,  299,   96,  335,  300,  193,   87,  313,  206,
      336,  301,  314,  207,  326,  327,  323,  208,  302,  324,
      328,  333,  310,  209,  311,  334,  210, 1169,  312,  342,
      329,  335,  343,  193,  193,  313,  337,  336,  338,  314,

      330,  211,  344,  212,  345,  331,  332,  339,  213,  340,
      346,  347,  348,  214,  193,   47,  342,  329,  349,  343,
      341,  193,  350,  337,  351,  338,   47,  330,  211,  344,
      212,  345,  331,  332,  339,  213,  340,  346,  347,  348,
      214,  193,  215,  352,  353,  349,  193,  341,  354,  350,
      216,  351,  355,  217,  359,  360,  218,  361, 1169,  219,
      365, 1169,  220, 1169,  366,  367,  193, 1169, 1169,  215,
      352,  353,  356,  193, 1169,  354, 1169,  216, 1169,  355,
      217,  359,  360,  218,  361,  357,  219,  365,  362,  220,
      358,  366,  367,  193,  193,  226,  368,  363,  369,  356,

      371,  227,  228,  229,  372,  364,  373,  376,  230,  370,
      377, 1169,  357,  378,  193,  362,  379,  358,  374, 1169,
      380,  193,  226,  368,  363,  369,  381,  371,  227,  228,
      229,  372,  364,  373,  376,  230,  370,  377,  375, 1169,
      378,  193,  239,  379,  382,  374,  193,  380,  384,  385,
      386,  502,  193,  381, 1169, 1169,  240,  383, 1169,  503,
      390,  193,  241,  242,  504,  375,  193, 1169, 1169,  239,
     1169,  382,  193,  193,  505,  384,  385,  386,  502,  193,
     1169,  193,  193,  240,  383,  193,  503,  390,  193,  241,
      242,  504,  392,  193,  193,  243,  397,  391,  193,  193,

      393,  505,  193,  244, 1169,  193, 1169,  245,  193,  193,
      246, 1169,  193,  193,  193, 1169,  506, 1169,  193,  392,
     1169,  193,  243,  397,  391,  193,  396,  393, 1169,  193,
      244,  193,  193,  193,  245,  394, 1169,  246,  395,  193,
      193,  193,  253,  506,  254,  193,  507,  255,  193,  398,
      399,  193,  508,  396,  256,  257, 1169, 1169,  193,  193,
      193, 1169,  394,  400,  193,  395,  193, 1169,  193,  253,
      509,  254, 1169,  507,  255,  193,  398,  399,  193,  508,
     1169,  256,  257,  408,  403,  193,  193,  193,  193, 1169,
      400,  193,  258,  409,  401,  193,  259,  509,  432,  260,

      261,  402,  513,  193,  514,  193,  262,  193,  193,  263,
      408,  403,  193,  515,  193,  193,  193, 1169, 1169,  258,
      409,  401, 1169,  259, 1169,  432,  260,  261,  402,  513,
      193,  514,  193,  262,  193,  193,  263, 1169, 1169, 1169,
      515, 1169, 1169,  193,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,   92,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  187,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  188,  193,  193,  516,  193,
     1169,  193,  517,  404,  405,  406, 1169,  407, 1169,  420,
     1169, 1169,  410,  193,  417,  418,  193,  411, 1169,  193,
     1169,  193, 1169,  193,  193,  516,  193,  421,  193,  517,
      404,  405,  406,  193,  407,  193,  420,  422,  193,  410,
      193,  417,  418,  193,  411,  412,  193,  413,  193,  193,
      414,  419, 1169,  193,  421,  193,  415,  423,  193,  193,
      193,  193,  193,  416,  422,  193,  518, 1169,  429,  193,
      519, 1169,  412,  193,  413,  520,  193,  414,  419,  193,
      193,  193,  193,  415,  423,  193,  193, 1169,  193,  521,

      416,  193, 1169,  518,  193,  429,  193,  519,  430,  193,
      193,  522,  520,  193,  431, 1169,  193,  424,  193,  425,
      434,  193,  193,  426,  193,  440,  521, 1169,  193,  193,
      427,  193,  433,  193,  428,  430,  193, 1169,  522,  193,
      193,  431,  193,  193,  424,  193,  425,  434,  193,  193,
      426,  193,  440,  435,  193,  436,  193,  427,  193,  433,
      193,  428,  523,  193,  193,  193,  193,  439,  437,  193,
      193,  438,  193,  193,  193,  442, 1169,  441,  193,  193,
      435,  193,  436,  193,  193,  193,  524,  448,  447,  523,
      193,  193,  193,  193,  439,  437,  193, 1169,  438,  193,

      193,  193,  442,  193,  441,  193,  193,  193,  450, 1169,
      193,  193,  527,  524,  448,  447,  449, 1169,  528,  529,
      193,  443,  193,  193,  193, 1169,  193,  193, 1169, 1169,
      193,  444,  193,  457,  193,  450,  445,  446,  451,  527,
      452,  525,  193,  449,  193,  528,  529, 1169,  443,  193,
     1169,  193,  193,  453,  193,  454,  526,  193,  444,  193,
      457,  193,  530,  445,  446,  451,  455,  452,  525,  193,
      531,  193,  193, 1169,  456,  193,  193,  193, 1169,  193,
      453,  193,  454,  526,  193,  458,  532,  459,  193,  530,
      460,  193,  193,  455,  533,  193,  193,  531,  461,  193,

      193,  456,  193,  193,  193,  462,  193,  463,  193,  193,
     1169,  193,  458,  532,  459,  485, 1169,  460,  193,  193,
      193,  533,  193,  193, 1169,  461,  193,  193,  193,  193,
      464,  193,  462,  193,  463,  193,  193,  467,  193,  193,
      468,  193,  485,  465,  469, 1169,  534,  193,  193, 1169,
      535,  193,  466,  193, 1169,  193,  193,  464,  193,  193,
      193,  193,  193, 1169,  467,  536,  193,  468,  193, 1169,
      465,  469,  470,  534,  193,  193,  193,  535,  193,  466,
      193,  474,  473,  537, 1169,  471,  193,  193,  193, 1169,
      472,  538,  536,  498,  193,  193,  193, 1169,  475,  470,

      193,  193,  476,  193,  193,  539,  193,  193,  474,  473,
      537,  477,  471,  193, 1169,  193,  479,  472,  538,  478,
      498,  193,  193,  193,  193,  475,  193,  193,  193,  476,
      481,  193,  539,  193,  193,  540,  482, 1169,  477,  193,
      193,  480,  193,  479,  193,  193,  478, 1169,  193,  541,
      193,  193,  486,  193,  193,  193,  487,  481,  483,  193,
     1169,  193,  540,  482,  193,  193,  193, 1169,  480,  484,
      193,  193,  193, 1169,  488,  193,  541,  193,  193,  486,
      193,  193, 1169,  487,  490,  483,  193,  491,  492,  193,
     1169,  193,  193,  496,  489, 1169,  484,  193,  193,  193,

      193,  488, 1169,  493,  542,  193,  497,  193, 1169,  193,
     1169,  490,  543,  193,  491,  492,  193,  193, 1169,  193,
      496,  489,  193,  544,  500,  193,  193,  193,  193,  494,
      493,  542,  499,  497,  545,  495,  193,  193,  546,  543,
      193,  547,  193,  510,  193,  511,  193,  548,  193,  193,
      544,  500, 1169, 1169, 1169,  193,  494, 1169, 1169,  499,
      512,  545,  495,  549,  193,  546,  550,  551,  547,  193,
      510,  552,  511,  553,  548,  193,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  554,  512,  555,  556,
      549,  558,  559,  550,  551,  560,  561,  562,  552,  557,

      553,  563,  564,  565,  566,  567,  568,  569,  570,  571,
      572,  573,  574,  554,  575,  555,  556,  576,  558,  559,
      577,  578,  560,  561,  562,  579,  557,  580,  563,  564,
      565,  566,  567,  568,  569,  570,  571,  572,  573,  574,
      581,  575,  582,  583,  576,  584,  585,  577,  578,  586,
      587,  588,  579,  589,  580,  590,  591,  592,  593,  594,
      595,  598,  596,  599,  600,  601,  602,  581,  603,  582,
      583,  597,  584,  585,  604,  606,  586,  587,  588,  607,
      589,  610,  590,  591,  592,  593,  594,  595,  598,  596,
      599,  600,  601,  602,  611,  603,  605, 1169,  597,  608,

      193,  604,  606,  609,  613,  193,  607, 1169,  610,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  614,
      193,  611,  193,  605,  193,  193,  608,  193,  193,  615,
      609,  613,  193,  616,  193, 1169, 1169,  193,  724,  193,
     1169,  725,  193,  193, 1169,  726,  614,  193,  193,  193,
     1169,  193,  193,  617,  193,  193,  615,  193,  193,  193,
      616,  193,  618,  193,  193,  724,  193,  193,  725,  193,
      193,  621,  726,  622,  620,  193,  193,  619,  193,  193,
      617,  193,  193,  727,  193,  193,  193,  193,  623,  618,
      193,  193,  625,  193,  193,  624,  193,  193,  621,  626,

      622,  620,  193,  193,  619,  193,  193,  193,  631,  193,
      727,  193,  627,  728,  193,  623,  193,  193,  193,  625,
      193,  629,  624,  193,  193,  193,  626,  628,  193,  193,
      630, 1169, 1169,  193,  193,  631,  193,  635,  193,  627,
      728,  193,  193,  193,  193,  193,  193,  632,  629,  633,
      634, 1169,  193,  193,  628,  193,  638,  630,  193,  639,
      193,  193,  193,  193,  635, 1169,  193,  636,  193,  193,
     1169,  643,  193,  193,  632,  193,  633,  634,  193,  193,
      193,  641,  637,  638,  193,  193,  639,  193,  193,  193,
      640,  193,  193,  193,  636,  193,  193,  644,  643,  729,

      645,  193,  193,  642,  193,  193,  193,  730,  641,  637,
     1169,  193,  193,  646,  193,  193,  193,  640,  193,  193,
      193,  193,  193,  193,  644, 1169,  729,  645,  193,  193,
      642,  193,  193,  651,  730,  193,  648,  193,  731,  193,
      646,  193,  193,  193,  732, 1169,  647,  193,  193,  193,
      649, 1169,  193,  193,  652,  650,  193,  193,  193,  193,
      651,  193,  193,  648,  193,  731,  193,  193,  193,  656,
      733,  732,  193,  647,  653,  654,  193,  649,  193,  193,
      193,  652,  650,  193,  193,  193,  193,  193,  193, 1169,
      655,  193,  193,  193,  193,  193,  656,  733,  658,  193,

      193,  653,  654,  193,  659,  193,  193,  657, 1169, 1169,
      193,  193, 1169,  193,  193,  193,  193,  655,  193,  193,
      193,  660,  193,  734,  664,  658,  193,  193, 1169,  661,
      193,  659, 1169,  193,  657,  193,  193,  665,  193,  193,
      666,  662,  193,  193,  193, 1169,  735,  193,  660,  663,
      734,  664,  193,  193,  193,  193,  661,  193, 1169,  193,
      193,  670,  193,  193,  665,  667,  193,  666,  662,  193,
      669,  193,  193,  735,  193,  668,  663, 1169,  193,  193,
      672,  193,  193, 1169,  193,  193,  193,  193,  670,  193,
      193,  675,  667,  671,  673,  193,  193,  669,  193,  193,

      193,  193,  668,  674,  193,  193,  193,  672,  676,  193,
      193,  677,  193, 1169,  193,  193,  193,  193,  675,  736,
      671,  673,  193,  193,  193,  193,  193,  193,  193,  193,
      674,  193,  193,  193,  193,  676,  193,  193,  677,  678,
      193,  193,  193,  193,  680,  193,  736,  679,  193,  684,
      193,  193,  193,  193,  683,  193,  193,  193,  682,  193,
      193,  193,  685, 1169,  681,  193,  678,  193, 1169,  193,
      193,  680,  193,  193,  679,  193,  684,  193, 1169,  193,
      690,  683,  193, 1169,  193,  682,  686,  193,  193,  685,
      193,  681,  193,  193,  193,  691,  193,  687,  193,  193,

      193, 1169,  737, 1169,  193,  688,  689,  690,  193,  193,
      193,  738, 1169,  686,  193,  193,  193,  193,  193,  193,
      193,  193,  691, 1169,  687,  193,  193,  193,  695,  737,
      693,  692,  688,  689,  739,  193,  193,  193,  738,  697,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  694,
      696, 1169,  193,  193,  193,  695, 1169,  693,  692,  193,
      193,  739,  193,  193,  193, 1169,  697,  193,  699,  193,
      698,  193,  193,  193,  193,  193,  694,  696,  193,  193,
      193,  193,  740,  193, 1169, 1169,  193,  193,  701,  193,
     1169,  193,  193,  700,  702,  699,  705,  698,  193,  193,

      193,  193,  193,  193,  193,  193,  741,  703,  193,  740,
      193,  704,  193, 1169,  742,  701,  193,  193, 1169,  193,
      700,  702,  193,  705,  193,  193,  706,  707,  193,  193,
      193,  193,  743,  741,  703,  193,  708,  193,  704,  193,
      193,  742,  712,  193,  193,  711,  193,  193,  193,  193,
      709,  193,  710,  706,  707,  193,  744,  713, 1169,  743,
      193, 1169,  193,  708,  193,  193,  193,  193,  193,  712,
      193, 1169,  711,  193,  193,  193,  715,  709,  193,  710,
     1169,  714,  193,  744,  713,  193,  193,  193,  717, 1169,
      193,  193,  193,  193,  193,  193,  193,  193,  716,  721,

      719,  718,  745,  715,  720,  193,  193,  722,  714,  746,
      747,  193,  193,  193,  193,  717,  193,  193,  193,  748,
      749,  193,  750,  193,  751,  716,  721,  719,  718,  745,
      752,  720,  753,  193,  722,  754,  746,  747,  193,  755,
      756,  193,  757,  193,  758,  759,  748,  749,  760,  750,
      761,  751,  762,  763,  764,  765,  768,  752,  769,  753,
      770,  771,  754,  766,  772,  773,  755,  756,  774,  757,
      775,  758,  759,  776,  767,  760,  777,  761,  778,  762,
      763,  764,  765,  768,  779,  769,  780,  770,  771,  781,
      766,  772,  773,  782,  783,  774,  784,  775,  785,  786,

      776,  767,  787,  777,  788,  778,  789,  790,  791,  792,
      793,  779,  794,  780,  795,  796,  781,  797,  798,  799,
      782,  783,  800,  784,  801,  785,  786,  802,  803,  787,
      804,  788,  805,  789,  790,  791,  792,  793,  806,  794,
      807,  795,  796,  193,  797,  798,  799, 1169,  193,  800,
     1169,  801,  193,  193,  802,  803,  809,  804,  193,  805,
     1169,  810,  815,  193,  193,  806,  894,  807,  193, 1169,
      193,  813,  811,  812,  193,  193,  895,  193,  193,  193,
      193, 1169,  193,  809,  193,  193,  814,  193,  810,  815,
      193,  193,  816,  894,  193,  193,  193,  193,  813,  811,

      812,  193,  817,  895,  193,  193,  193,  193,  193,  193,
      193,  193,  819,  814,  193, 1169,  193, 1169,  818,  816,
     1169,  193,  193,  193,  193,  896,  193,  193,  193,  817,
      193,  193, 1169,  193,  193,  193,  193,  193, 1169,  819,
      820,  193,  193,  193,  193,  818,  821,  193, 1169,  193,
      822,  193,  896,  193,  193,  193,  193,  193,  193,  823,
      193,  193,  193,  193,  193,  193, 1169,  820,  193,  193,
      825,  193,  824,  821,  193,  193,  826,  822,  193, 1169,
      193, 1169,  193,  193, 1169,  193,  823,  193,  193,  193,
      827,  193,  193,  193,  828,  193,  193,  825,  193,  824,

      831, 1169,  193,  826,  193, 1169,  829,  193,  830,  193,
      193,  832,  193,  193,  193, 1169,  193,  827,  193,  193,
      193,  828,  193,  193,  193,  193, 1169,  831,  193, 1169,
      193,  193,  839,  829,  193,  830,  193,  193,  832,  193,
      193,  193,  193,  193,  835,  193,  193,  833,  193, 1169,
      193,  193,  193,  834,  837,  193,  193,  193,  193,  839,
      838,  193,  193,  193,  193,  836,  193, 1169,  193,  193,
      193,  835,  841,  193,  833,  193,  193,  193,  193,  193,
      834,  837,  193,  193,  193,  193,  193,  838,  193,  193,
      842,  193,  836,  193,  193,  193,  193,  193,  897,  841,

      193,  840,  193,  193,  193,  193,  193,  193, 1169,  193,
      193,  193,  193,  193,  193,  193,  898,  842,  843,  844,
      193,  193,  193,  193,  193,  897, 1169,  193,  840,  193,
      193,  193,  193,  193,  193,  846,  845,  193,  193,  193,
      193,  193,  193,  898, 1169,  843,  844, 1169,  193,  193,
     1169,  193,  193,  847,  193,  193,  899,  193,  193,  193,
      193,  849,  846,  845,  193,  193,  193,  193,  193,  193,
      193,  848,  193,  853,  193,  193,  193,  850,  851,  193,
      847, 1169,  193,  899,  193,  193,  193,  193,  849,  852,
      193,  193,  193,  193,  193,  193,  193,  193,  848,  193,

      853,  193, 1169,  193,  850,  851,  193,  193,  193,  193,
      856,  193,  193,  193,  900,  855,  852,  193, 1169,  193,
      901,  193,  854,  193, 1169, 1169,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  856,  902,  193,
      193,  900,  855,  859,  903,  857,  858,  901,  193,  854,
     1169,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  860,  861,  862,  193,  902, 1169,  193,  193, 1169,
      859,  903,  857,  858, 1169,  193,  193,  193,  193,  193,
      193,  193,  866,  193,  193,  865,  193,  193,  860,  861,
      862,  193, 1169,  863,  864,  193,  193,  193,  867,  193,

      193,  193,  193,  193,  193, 1169,  193,  193,  193,  866,
      193,  193,  865,  193,  904, 1169,  905, 1169, 1169,  193,
      863,  864,  193,  193,  193,  867,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  906,  193,  871,  868, 1169,
      193,  904,  872,  905,  869,  873,  193,  870, 1169,  193,
      193,  193,  193,  874,  193,  193,  193,  193,  193,  193,
      193,  193,  906,  193,  871,  868,  193,  193,  875,  872,
      877,  869,  873, 1169,  870,  193,  193,  193,  193,  193,
      874,  193,  193,  193,  193,  193,  193,  193,  193,  876,
      193, 1169, 1169,  193,  878,  875,  193,  877,  193,  193,

      193, 1169,  193,  193,  193,  193, 1169,  881,  193,  193,
     1169,  193,  193,  193,  879,  193,  876,  193,  193,  193,
      193,  878,  880,  193,  193,  193,  193,  193,  193,  193,
     1169,  193,  193,  882,  881,  193,  193,  193,  884,  193,
     1169,  879,  193,  887,  193,  193,  193,  193,  193,  880,
      886,  193,  907,  883,  885,  193,  193,  193,  193,  193,
      882,  888,  193,  193,  193,  884,  193,  193,  193,  193,
      887,  193,  193,  193, 1169,  193,  889,  886,  193,  907,
      883,  885,  193,  908,  193,  193,  193,  193,  888,  193,
      193,  891,  193,  193,  193,  193,  193,  909,  890,  193,

      193,  193,  193,  889,  910,  193,  911,  912,  913,  193,
      908,  193,  914,  915,  193,  892,  193,  916,  891,  193,
      193,  193,  917,  193,  909,  890,  918,  919,  193,  193,
      920,  910,  921,  911,  912,  913,  922,  923,  193,  914,
      915,  926,  892,  193,  916,  927,  928,  924,  193,  917,
      925,  929,  930,  918,  919,  931,  932,  920,  933,  921,
      934,  935,  936,  922,  923,  937,  938,  939,  926,  940,
      941,  942,  927,  928,  924,  943,  944,  925,  929,  930,
      945,  946,  931,  932,  947,  933,  948,  934,  935,  936,
      949,  950,  937,  938,  939,  951,  940,  941,  942,  952,

      953,  954,  943,  944,  193,  193, 1018,  945,  946,  193,
     1169,  947, 1169,  948,  193,  957, 1169,  949,  950,  193,
      958,  960,  951,  193,  193,  193,  952,  953,  954,  193,
      956,  193,  193, 1018,  193,  193,  193,  959,  193,  193,
      193,  193,  957,  193, 1169, 1019,  193,  958,  960,  193,
      193,  193,  193,  193,  193,  964,  193,  956,  193,  963,
     1169,  193,  193,  961,  959,  193,  193,  193,  962,  193,
      193,  193, 1019,  193,  193,  193,  193,  193, 1169,  193,
      193,  193,  964,  965,  967,  193,  963,  966,  193,  969,
      961,  193, 1020,  193, 1169,  962,  193,  193,  193,  193,

      193,  193,  193,  193,  193,  193,  193,  970,  193,  193,
      965,  967,  968,  193,  966,  193,  969, 1021,  193, 1020,
      193,  973,  193,  193,  193,  193,  193, 1169, 1169, 1169,
      193, 1169,  193,  974,  970,  193,  193,  971,  193,  968,
      193,  193,  193, 1169, 1021, 1169,  193,  972,  973,  193,
      193, 1022,  193,  193,  979,  193,  193,  193,  193,  193,
      974,  975, 1169,  978,  971,  193,  193,  193,  193,  193,
      976,  977,  193,  193,  972,  193,  193,  193, 1022,  193,
      193,  979,  193,  193,  193,  193,  193,  193,  975,  193,
      978,  193,  193,  193,  193,  193,  981,  976,  977,  193,

      193,  193,  193,  193,  193,  193,  193,  982, 1023,  193,
      980,  193, 1169,  193,  193,  193,  193, 1169,  193,  193,
      193,  193,  193,  981,  193,  193,  193,  193,  193,  985,
      193, 1169,  193,  193,  982, 1023,  193,  980,  193,  983,
      193,  193,  193, 1169,  193,  984,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  986,  985,  193,  987,  193,
      193,  193, 1169,  193,  193, 1169,  983,  193,  193,  989,
      988,  193,  984,  193,  193,  193,  193,  193,  193,  193,
     1169,  193,  986,  193,  193,  987,  193,  193,  193,  193,
      193,  193,  990,  193,  193,  193,  989,  988,  193,  991,

     1169,  193,  193,  193,  193,  193,  193,  992,  993,  193,
      193,  193,  994,  193,  193, 1169,  193,  997, 1024,  990,
      193, 1169,  193,  193,  193,  193,  991,  193,  193,  193,
      193,  193,  193,  193,  992,  993,  193,  193,  193,  994,
      193,  995,  998, 1169,  997, 1024,  996,  193,  193, 1025,
      193,  193,  193,  193,  193,  193,  193,  999,  193,  193,
      193,  193, 1000, 1026,  193,  193,  193, 1002,  995,  998,
     1001,  193,  193,  996,  193,  193, 1025, 1169, 1169,  193,
      193,  193, 1003,  193,  999,  193,  193,  193,  193, 1000,
     1026,  193, 1004,  193, 1002, 1169,  193, 1001,  193,  193,

     1008, 1005,  193,  193,  193,  193,  193,  193,  193, 1003,
      193, 1169, 1169,  193,  193, 1006,  193, 1009,  193, 1004,
     1007,  193,  193,  193,  193,  193,  193, 1008, 1005,  193,
      193,  193,  193,  193,  193, 1010, 1011,  193, 1012,  193,
      193,  193, 1006,  193, 1009, 1169, 1014, 1007,  193,  193,
      193,  193,  193,  193, 1013,  193,  193,  193,  193,  193,
      193, 1027, 1010, 1011,  193, 1012,  193,  193,  193,  193,
      193, 1016,  193, 1014, 1028,  193,  193,  193, 1015, 1029,
     1030, 1013,  193,  193,  193,  193,  193,  193, 1027,  193,
     1031, 1032,  193, 1033, 1034,  193,  193,  193, 1016,  193,

     1035, 1028,  193,  193, 1036, 1015, 1029, 1030, 1037, 1038,
     1039, 1040, 1041, 1042, 1043, 1044,  193, 1031, 1032,  193,
     1033, 1034,  193, 1045, 1046, 1047, 1048, 1035, 1049, 1050,
     1051, 1036, 1052, 1053, 1055, 1037, 1038, 1039, 1040, 1041,
     1042, 1043, 1044,  193, 1057,  193, 1092,  193, 1169,  193,
     1045, 1046, 1047, 1048,  193, 1049, 1050, 1051, 1056, 1052,
     1053, 1055, 1058,  193,  193,  193,  193,  193,  193,  193,
      193, 1057,  193, 1092,  193, 1060,  193,  193, 1093,  193,
     1059,  193, 1169, 1094, 1169, 1056,  193, 1061,  193, 1058,
      193,  193,  193,  193,  193,  193,  193,  193, 1062,  193,

      193,  193, 1060,  193,  193, 1093,  193, 1059, 1063,  193,
     1094,  193, 1169,  193, 1061,  193, 1065,  193, 1064,  193,
      193,  193,  193,  193,  193, 1062,  193,  193,  193,  193,
      193,  193, 1066,  193,  193, 1063,  193,  193,  193,  193,
     1169, 1169,  193, 1065,  193, 1064,  193,  193,  193,  193,
      193, 1067,  193,  193,  193,  193,  193,  193,  193, 1066,
      193,  193, 1169,  193,  193,  193,  193,  193,  193,  193,
     1069,  193,  193,  193, 1068,  193,  193,  193, 1067,  193,
      193,  193,  193,  193,  193,  193, 1071,  193,  193, 1070,
      193,  193,  193,  193,  193,  193,  193, 1069,  193,  193,

      193, 1068,  193,  193,  193, 1072,  193,  193,  193,  193,
      193,  193,  193, 1071,  193,  193, 1070,  193,  193, 1169,
      193, 1073, 1075,  193, 1074,  193,  193,  193,  193,  193,
     1169, 1095, 1072,  193,  193,  193,  193,  193,  193, 1077,
      193,  193,  193, 1096,  193,  193,  193, 1169, 1073, 1075,
     1169, 1074,  193,  193,  193,  193,  193, 1076, 1095,  193,
     1078,  193,  193, 1079,  193,  193, 1077,  193,  193,  193,
     1096, 1169,  193,  193, 1080,  193,  193,  193,  193,  193,
     1169, 1169, 1169, 1097, 1076,  193,  193, 1078,  193,  193,
     1079, 1081,  193, 1082, 1098,  193,  193,  193,  193,  193,

     1169, 1080,  193,  193,  193,  193,  193,  193,  193, 1084,
     1097, 1099,  193,  193, 1083, 1085, 1169,  193, 1081,  193,
     1082, 1098,  193,  193,  193,  193,  193,  193,  193, 1086,
      193,  193, 1087,  193,  193,  193, 1084,  193, 1099,  193,
      193, 1083, 1085,  193,  193,  193,  193,  193,  193, 1100,
      193,  193, 1101, 1169,  193,  193, 1086,  193,  193, 1087,
      193, 1088, 1169,  193,  193,  193,  193,  193,  193,  193,
      193, 1089,  193,  193,  193,  193, 1100,  193,  193, 1101,
     1090, 1102, 1103, 1104, 1105, 1106,  193, 1169, 1088,  193,
      193, 1169,  193,  193,  193,  193,  193,  193, 1089,  193,

      193, 1108,  193,  193, 1169, 1109,  193, 1090, 1102, 1103,
     1104, 1105, 1106,  193, 1110,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193, 1108,  193,
      193, 1111, 1109,  193, 1169,  193,  193,  193,  193,  193,
      193, 1110,  193, 1169,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193, 1112,  193,  193, 1111,  193,
      193,  193,  193,  193,  193,  193,  193,  193, 1113,  193,
      193,  193,  193,  193,  193, 1169, 1114, 1169,  193, 1124,
      193,  193, 1112,  193,  193, 1115,  193,  193,  193,  193,
      193,  193,  193, 1116,  193, 1113,  193,  193,  193,  193,

      193, 1125,  193, 1114,  193, 1169, 1124,  193,  193, 1169,
      193, 1126, 1115,  193,  193,  193,  193,  193,  193,  193,
     1116,  193,  193,  193,  193, 1117,  193,  193, 1125,  193,
      193,  193, 1118, 1169,  193,  193, 1119,  193, 1126, 1127,
      193,  193,  193,  193, 1122,  193,  193,  193,  193,  193,
      193,  193, 1117,  193,  193, 1120,  193,  193,  193, 1118,
     1121, 1128,  193, 1119,  193,  193, 1127,  193,  193, 1129,
      193, 1122,  193,  193,  193,  193,  193, 1130,  193,  193,
      193,  193, 1120,  193, 1169,  193, 1169, 1121, 1128,  193,
     1169,  193,  193, 1132,  193,  193, 1129,  193,  193,  193,

      193,  193,  193,  193, 1130,  193,  193,  193,  193,  193,
      193,  193, 1133, 1134, 1169,  193,  193,  193,  193, 1140,
     1132,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193, 1141,  193, 1135,  193,  193,  193,  193, 1133,
     1134,  193,  193, 1136,  193,  193, 1140,  193,  193,  193,
      193, 1138,  193,  193, 1142,  193, 1144,  193,  193, 1141,
      193, 1135,  193, 1137,  193,  193, 1169,  193,  193,  193,
     1136, 1169,  193,  193,  193,  193,  193, 1148, 1138,  193,
      193, 1142,  193, 1144,  193,  193,  193, 1145,  193,  193,
     1137,  193,  193,  193,  193, 1169,  193,  193, 1146,  193,

      193,  193,  193,  193, 1148, 1169,  193,  193,  193, 1169,
     1150,  193,  193,  193, 1145,  193,  193,  193, 1169, 1169,
      193,  193, 1169, 1169,  193, 1146, 1169,  193,  193, 1169,
     1169, 1169, 1169,  193,  193,  193, 1169, 1150, 1169, 1169,
     1169, 1169, 1169, 1169,  193, 1169, 1169, 1169,  193, 1169,
     1169, 1169, 1169, 1169,  193,   46,   46,   46,   46,   46,
       88, 1169, 1169,   88,   88,  178,  178,  178, 1169,  178,
      180, 1169,  180,  180,  180,  183, 1169,  183,  183,  183,
      193, 1169,  193,  193,  193,    7, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169
    } ;

static const flex_int16_t yy_chk[4763] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    9,    9,   10,   10,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   15,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       18,   21,   22,   21,   24, 1172,   23,   30,   24,   21,
     1166,   21,   24,   23,   31,   21,   21,   44,   24,   99,

       23,   24,   22,   23, 1165,   25, 1164,   25,   21,   22,
       21,   24,   25,   23,   30,   24,   21,   25,   21,   24,
       23,   31,   21,   21,   44,   24,   99,   23,   24,   22,
       23,   27,   25,   28,   25, 1163,   32,   27, 1162,   25,
       32,   28,   29,   42,   25,   26,   32,   28,   29,   29,
       29,   42, 1161,   26, 1160,   29,   26, 1159,   27,   26,
       28, 1158,   26,   32,   27,   26, 1157,   32,   28,   29,
       42, 1156,   26,   32,   28,   29,   29,   29,   42,   34,
       26,   33,   29,   26,   36,   33,   26,   43,   43,   26,
       35,   33,   26,   34, 1155,   36,   49,   49,   35,   34,

       34,   36,   35,   38, 1154,   35,   34,   38,   33,   50,
       50,   36,   33,   38,   43,   43, 1153,   35,   33,   41,
       34,   41,   36,  100,   41,   35,   34,   34,   36,   35,
       38,   39,   35,   39,   38,  103,   39,   71,   55,  104,
       38,   58,   58,   39,   39, 1152,   41, 1151,   41,   55,
      100,   41,   86,   86,   67,   70,  108,   71,   39, 1149,
       39,   67,  103,   39,   71,   70,  104,   67,  111,  101,
       39,   39,   40,  111,   67,   70,   40,  101,  107,   40,
       40,   67,   70,  108,   71,  107,   40,  114,   67,   40,
      181,  181,   70, 1147,   67,  111,  101, 1143, 1139,   40,

      111,   67,   70,   40,  101,  107,   40,   40, 1131, 1123,
     1107, 1091,  107,   40,  114, 1054,   40,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   61,   61,
     1017,   61,   61,   61,   61,   61,   61,   77,   68,   84,
      955,  893,   68,  808,  723,  115,   68,   61,   61,   61,
       72,  116,   68,   61,   72,   61,  117,   77,  118,   84,
       72,   61,   68,   61,   77,   68,   84,   61,   61,   68,
       72,   83,  115,   68,   83,   83,  612,   72,  116,   68,
       61,   72,   61,  117,   77,  118,   84,   72,   61,   68,

       61,   83,  120,  501,   61,   61,  388,   72,   83,  274,
      185,   83,   83,   61,   62,   62,  183,   62,   62,   62,
       62,   62,   62,   90,   88,   85,   73,   76,   83,  120,
       73,   76,   60,   62,   62,   62,   73,  110,   76,   78,
       62,   81,  102,   78,   76,  102,   73,  110,  121,   78,
       81,   76,   81,   73,   76,   81,  122,   73,   76,   78,
       62,   81,   59,   73,  110,   76,   78,   62,   81,  102,
       78,   76,  102,   73,  110,  121,   78,   81,   76,   81,
       52,  123,   81,  122,  105,  105,   78,   62,   81,   62,
       63,  124,   82,  125,   63,  126,   82,   63,  105,  127,

       82,  109,  109,  109,   63,  109,   51,   63,  123,  113,
      113,  105,  105,  129,   63,   47,   82,   63,  124,   82,
      125,   63,  126,   82,   63,  105,  127,   82,  109,  109,
      109,   63,  109,  112,   63,  112,  113,  113,  112,   45,
      129,   63,   64,   82,  112,   20,   64,  130,  132,  128,
       64,  112,  128,  133,  135,  119,   64,  119,  136,   64,
      112,  119,  112,   19,  137,  112,   64,   11,  119,   64,
      138,  112,  119,   64,  130,  132,  128,   64,  112,  128,
      133,  135,  119,   64,  119,  136,   64,    7,  119,  141,
      134,  137,  142,   64,   65,  119,  139,  138,  139,  119,

      134,   65,  143,   65,  144,  134,  134,  140,   65,  140,
      145,  146,  147,   65,   65,    4,  141,  134,  148,  142,
      140,   65,  150,  139,  151,  139,    3,  134,   65,  143,
       65,  144,  134,  134,  140,   65,  140,  145,  146,  147,
       65,   65,   66,  152,  153,  148,   66,  140,  154,  150,
       66,  151,  154,   66,  156,  157,   66,  158,    0,   66,
      160,    0,   66,    0,  161,  162,   66,    0,    0,   66,
      152,  153,  155,   66,    0,  154,    0,   66,    0,  154,
       66,  156,  157,   66,  158,  155,   66,  160,  159,   66,
      155,  161,  162,   66,   69,   69,  163,  159,  164,  155,

      165,   69,   69,   69,  166,  159,  167,  169,   69,  164,
      169,    0,  155,  170,   69,  159,  171,  155,  168,    0,
      172,   69,   69,  163,  159,  164,  172,  165,   69,   69,
       69,  166,  159,  167,  169,   69,  164,  169,  168,    0,
      170,   69,   74,  171,  173,  168,   74,  172,  174,  175,
      176,  277,  193,  172,    0,    0,   74,  173,    0,  279,
      194,  194,   74,   74,  280,  168,   74,    0,    0,   74,
        0,  173,  193,   74,  282,  174,  175,  176,  277,  193,
        0,  194,  195,   74,  173,  196,  279,  194,  194,   74,
       74,  280,  196,   74,   75,   75,  199,  195,  199,  193,

      196,  282,  195,   75,    0,  196,    0,   75,  194,  195,
       75,    0,  196,  198,   75,    0,  284,    0,  199,  196,
        0,   75,   75,  199,  195,  199,  198,  196,    0,  195,
       75,  201,  196,  198,   75,  197,    0,   75,  197,  197,
      198,   75,   79,  284,   79,  199,  285,   79,  200,  200,
      200,  201,  286,  198,   79,   79,    0,    0,  201,  197,
      198,    0,  197,  200,   79,  197,  197,    0,  200,   79,
      287,   79,    0,  285,   79,  200,  200,  200,  201,  286,
        0,   79,   79,  205,  203,  218,  197,  202,  203,    0,
      200,   79,   80,  205,  202,  200,   80,  287,  218,   80,

       80,  202,  289,  205,  290,  218,   80,  202,  203,   80,
      205,  203,  218,  291,  202,  203,   80,    0,    0,   80,
      205,  202,    0,   80,    0,  218,   80,   80,  202,  289,
      205,  290,  218,   80,  202,  203,   80,    0,    0,    0,
      291,    0,    0,   80,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  188,  204,  206,  292,  210,
        0,  208,  293,  204,  204,  204,    0,  204,    0,  210,
        0,    0,  206,  211,  208,  208,  204,  206,    0,  210,
        0,  208,    0,  204,  206,  292,  210,  211,  208,  293,
      204,  204,  204,  211,  204,  209,  210,  212,  212,  206,
      211,  208,  208,  204,  206,  207,  210,  207,  208,  207,
      207,  209,    0,  226,  211,  209,  207,  213,  212,  213,
      211,  215,  209,  207,  212,  212,  294,    0,  215,  207,
      295,    0,  207,  226,  207,  296,  207,  207,  209,  213,
      226,  215,  209,  207,  213,  212,  213,    0,  215,  297,

      207,  216,    0,  294,  217,  215,  207,  295,  216,  225,
      226,  298,  296,  220,  217,    0,  213,  214,  215,  214,
      220,  216,  219,  214,  217,  225,  297,    0,  216,  225,
      214,  217,  219,  220,  214,  216,  225,    0,  298,  214,
      220,  217,  219,  221,  214,  222,  214,  220,  216,  219,
      214,  217,  225,  221,  223,  222,  225,  214,  224,  219,
      220,  214,  299,  221,  228,  222,  214,  224,  223,  219,
      221,  223,  222,  227,  223,  228,    0,  227,  224,  230,
      221,  223,  222,  231,  228,  224,  300,  231,  230,  299,
      221,  228,  222,  227,  224,  223,  232,    0,  223,  230,

      227,  223,  228,  231,  227,  224,  230,  233,  233,    0,
      231,  228,  302,  300,  231,  230,  232,    0,  303,  304,
      227,  229,  229,  232,  237,    0,  230,  233,    0,    0,
      231,  229,  234,  237,  233,  233,  229,  229,  234,  302,
      234,  301,  229,  232,  237,  303,  304,    0,  229,  229,
        0,  237,  234,  235,  233,  235,  301,  235,  229,  234,
      237,  236,  305,  229,  229,  234,  235,  234,  301,  229,
      306,  237,  239,    0,  236,  240,  238,  235,    0,  234,
      235,  236,  235,  301,  235,  238,  307,  239,  236,  305,
      240,  241,  239,  235,  309,  240,  238,  306,  241,  239,

      244,  236,  240,  238,  235,  242,  243,  243,  236,  242,
        0,  241,  238,  307,  239,  260,    0,  240,  241,  239,
      244,  309,  240,  238,    0,  241,  243,  244,  246,  242,
      245,  245,  242,  243,  243,  260,  242,  248,  241,  247,
      249,  248,  260,  246,  249,    0,  310,  244,  246,    0,
      311,  245,  247,  243,    0,  246,  242,  245,  245,  247,
      249,  248,  260,    0,  248,  312,  247,  249,  248,    0,
      246,  249,  250,  310,  252,  246,  250,  311,  245,  247,
      251,  252,  251,  313,    0,  250,  247,  249,  248,    0,
      250,  314,  312,  269,  252,  253,  250,    0,  253,  250,

      251,  252,  254,  250,  254,  315,  255,  251,  252,  251,
      313,  254,  250,  269,    0,  253,  255,  250,  314,  254,
      269,  252,  253,  250,  254,  253,  255,  251,  256,  254,
      257,  254,  315,  255,  257,  316,  258,    0,  254,  258,
      269,  256,  253,  255,  261,  262,  254,    0,  256,  317,
      259,  254,  261,  255,  257,  256,  262,  257,  259,  258,
        0,  257,  316,  258,  261,  262,  258,    0,  256,  259,
      259,  261,  262,    0,  263,  256,  317,  259,  263,  261,
      264,  257,    0,  262,  264,  259,  258,  264,  265,  265,
        0,  261,  262,  268,  263,    0,  259,  259,  263,  266,

      264,  263,    0,  266,  318,  263,  268,  264,    0,  265,
        0,  264,  319,  268,  264,  265,  265,  270,    0,  266,
      268,  263,  267,  320,  271,  263,  266,  264,  271,  267,
      266,  318,  270,  268,  321,  267,  265,  270,  322,  319,
      268,  323,  267,  288,  270,  288,  266,  324,  271,  267,
      320,  271,    0,    0,    0,  271,  267,    0,    0,  270,
      288,  321,  267,  325,  270,  322,  326,  327,  323,  267,
      288,  328,  288,  329,  324,  271,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  330,  288,  331,  332,
      325,  333,  334,  326,  327,  336,  337,  338,  328,  332,

      329,  339,  340,  341,  342,  343,  344,  345,  347,  348,
      349,  350,  351,  330,  352,  331,  332,  353,  333,  334,
      354,  355,  336,  337,  338,  356,  332,  357,  339,  340,
      341,  342,  343,  344,  345,  347,  348,  349,  350,  351,
      358,  352,  359,  360,  353,  361,  362,  354,  355,  363,
      365,  366,  356,  367,  357,  368,  369,  370,  371,  372,
      374,  376,  375,  376,  377,  378,  379,  358,  380,  359,
      360,  375,  361,  362,  381,  382,  363,  365,  366,  383,
      367,  385,  368,  369,  370,  371,  372,  374,  376,  375,
      376,  377,  378,  379,  386,  380,  381,    0,  375,  384,

      390,  381,  382,  384,  391,  392,  383,    0,  385,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  393,
      390,  386,  394,  381,  391,  392,  384,  390,  395,  394,
      384,  391,  392,  396,  397,    0,    0,  396,  502,  393,
        0,  503,  394,  398,    0,  504,  393,  390,  395,  394,
        0,  391,  392,  398,  397,  395,  394,  396,  399,  400,
      396,  397,  399,  398,  396,  502,  393,  401,  503,  394,
      398,  402,  504,  402,  401,  395,  404,  400,  399,  400,
      398,  397,  403,  505,  396,  399,  400,  401,  402,  399,
      398,  405,  404,  402,  401,  403,  404,  406,  402,  405,

      402,  401,  403,  404,  400,  399,  400,  407,  410,  403,
      505,  405,  406,  506,  401,  402,  409,  406,  405,  404,
      402,  408,  403,  404,  406,  408,  405,  407,  410,  403,
      409,    0,    0,  411,  407,  410,  409,  414,  405,  406,
      506,  414,  412,  409,  406,  408,  413,  411,  408,  412,
      413,    0,  408,  411,  407,  410,  416,  409,  416,  417,
      411,  414,  412,  409,  414,    0,  413,  415,  414,  412,
        0,  421,  408,  413,  411,  418,  412,  413,  416,  417,
      411,  419,  415,  416,  419,  416,  417,  415,  414,  412,
      418,  421,  420,  413,  415,  418,  422,  423,  421,  507,

      424,  423,  418,  420,  419,  416,  417,  508,  419,  415,
        0,  419,  420,  425,  415,  425,  422,  418,  421,  420,
      424,  423,  418,  422,  423,    0,  507,  424,  423,  427,
      420,  419,  426,  430,  508,  425,  427,  428,  510,  420,
      425,  429,  425,  422,  513,    0,  426,  424,  423,  427,
      428,    0,  426,  430,  431,  429,  427,  428,  431,  426,
      430,  429,  425,  427,  428,  510,  432,  433,  429,  435,
      514,  513,  435,  426,  432,  433,  427,  428,  431,  426,
      430,  431,  429,  434,  428,  431,  432,  433,  429,    0,
      434,  436,  435,  432,  433,  437,  435,  514,  437,  435,

      438,  432,  433,  434,  438,  431,  439,  436,    0,    0,
      434,  436,    0,  432,  433,  437,  440,  434,  436,  435,
      438,  439,  437,  515,  443,  437,  439,  438,    0,  440,
      434,  438,    0,  439,  436,  441,  440,  444,  436,  442,
      445,  441,  437,  440,  443,    0,  516,  438,  439,  442,
      515,  443,  448,  439,  447,  441,  440,  444,    0,  442,
      445,  448,  441,  440,  444,  446,  442,  445,  441,  449,
      447,  443,  448,  516,  447,  446,  442,    0,  450,  448,
      451,  447,  441,    0,  444,  446,  442,  445,  448,  449,
      452,  454,  446,  450,  452,  454,  449,  447,  450,  448,

      451,  447,  446,  453,  453,  450,  455,  451,  455,  456,
      452,  456,  446,    0,  460,  454,  449,  452,  454,  518,
      450,  452,  454,  457,  453,  450,  455,  451,  459,  456,
      453,  453,  458,  455,  460,  455,  456,  452,  456,  457,
      463,  460,  454,  457,  459,  462,  518,  458,  459,  464,
      457,  453,  458,  455,  463,  459,  456,  461,  462,  458,
      463,  460,  465,    0,  461,  462,  457,  463,    0,  464,
      457,  459,  462,  470,  458,  459,  464,  461,    0,  458,
      470,  463,  465,    0,  461,  462,  466,  463,  467,  465,
      466,  461,  462,  470,  468,  471,  464,  467,  469,  471,

      470,    0,  519,    0,  461,  468,  469,  470,  467,  465,
      466,  520,    0,  466,  468,  467,  472,  466,  469,  471,
      470,  468,  471,    0,  467,  469,  471,  473,  475,  519,
      473,  472,  468,  469,  522,  467,  472,  466,  520,  477,
      476,  468,  474,  472,  478,  469,  471,  473,  475,  474,
      476,    0,  479,  480,  473,  475,    0,  473,  472,  477,
      476,  522,  474,  472,  478,    0,  477,  476,  480,  474,
      479,  478,  479,  480,  473,  475,  474,  476,  481,  479,
      480,  482,  523,  483,    0,    0,  477,  476,  482,  474,
        0,  478,  484,  481,  483,  480,  486,  479,  481,  479,

      480,  482,  485,  483,  487,  481,  524,  484,  482,  523,
      483,  485,  484,    0,  525,  482,  486,  488,    0,  484,
      481,  483,  485,  486,  487,  481,  488,  489,  482,  485,
      483,  487,  526,  524,  484,  491,  489,  488,  485,  484,
      490,  525,  492,  486,  488,  491,  492,  489,  493,  485,
      490,  487,  490,  488,  489,  491,  527,  493,    0,  526,
      490,    0,  491,  489,  488,  494,  492,  490,  493,  492,
      496,    0,  491,  492,  489,  493,  495,  490,  495,  490,
        0,  494,  491,  527,  493,  494,  497,  490,  496,    0,
      496,  498,  494,  492,  500,  493,  499,  496,  495,  499,

      498,  497,  528,  495,  498,  495,  497,  500,  494,  529,
      530,  498,  494,  497,  500,  496,  499,  496,  498,  533,
      534,  500,  535,  499,  536,  495,  499,  498,  497,  528,
      537,  498,  538,  497,  500,  539,  529,  530,  498,  541,
      542,  500,  545,  499,  546,  548,  533,  534,  550,  535,
      551,  536,  552,  553,  554,  555,  558,  537,  562,  538,
      564,  566,  539,  556,  567,  567,  541,  542,  568,  545,
      569,  546,  548,  571,  556,  550,  572,  551,  573,  552,
      553,  554,  555,  558,  574,  562,  575,  564,  566,  577,
      556,  567,  567,  578,  580,  568,  581,  569,  582,  583,

      571,  556,  584,  572,  585,  573,  586,  588,  589,  590,
      591,  574,  594,  575,  595,  597,  577,  598,  599,  600,
      578,  580,  601,  581,  602,  582,  583,  603,  604,  584,
      605,  585,  607,  586,  588,  589,  590,  591,  609,  594,
      611,  595,  597,  613,  598,  599,  600,    0,  614,  601,
        0,  602,  615,  616,  603,  604,  613,  605,  617,  607,
        0,  614,  619,  613,  620,  609,  726,  611,  614,    0,
      613,  617,  615,  616,  622,  614,  728,  618,  617,  615,
      616,    0,  619,  613,  620,  617,  618,  623,  614,  619,
      613,  620,  621,  726,  622,  614,  621,  618,  617,  615,

      616,  622,  624,  728,  618,  617,  624,  623,  626,  619,
      625,  620,  626,  618,  623,    0,  621,    0,  625,  621,
        0,  622,  628,  621,  618,  730,  624,  627,  626,  624,
      625,  629,    0,  624,  623,  626,  630,  625,    0,  626,
      627,  632,  628,  621,  631,  625,  629,  627,    0,  628,
      630,  629,  730,  624,  627,  626,  630,  625,  629,  631,
      635,  632,  634,  630,  631,  633,    0,  627,  632,  628,
      634,  631,  633,  629,  627,  636,  635,  630,  629,    0,
      635,    0,  634,  630,    0,  633,  631,  635,  632,  634,
      636,  631,  633,  638,  637,  636,  640,  634,  637,  633,

      640,    0,  636,  635,  641,    0,  638,  635,  639,  634,
      639,  641,  633,  638,  642,    0,  640,  636,  637,  643,
      638,  637,  636,  640,  641,  637,    0,  640,  646,    0,
      639,  641,  650,  638,  642,  639,  644,  639,  641,  643,
      638,  642,  645,  640,  646,  637,  643,  644,  646,    0,
      647,  641,  650,  645,  648,  646,  644,  639,  648,  650,
      649,  642,  645,  644,  649,  647,  643,    0,  651,  645,
      647,  646,  653,  654,  644,  646,  653,  647,  648,  650,
      645,  648,  655,  644,  649,  648,  652,  649,  651,  645,
      656,  649,  647,  654,  656,  651,  653,  647,  731,  653,

      654,  652,  655,  653,  658,  648,  652,  657,    0,  655,
      659,  649,  660,  652,  656,  651,  732,  656,  657,  659,
      654,  656,  661,  653,  658,  731,    0,  657,  652,  655,
      659,  658,  660,  652,  657,  662,  661,  659,  668,  660,
      663,  656,  661,  732,    0,  657,  659,    0,  665,  661,
        0,  658,  664,  663,  657,  662,  733,  659,  668,  660,
      663,  665,  662,  661,  666,  668,  669,  663,  665,  661,
      670,  664,  664,  669,  671,  665,  667,  666,  667,  664,
      663,    0,  662,  733,  666,  668,  669,  663,  665,  667,
      670,  666,  672,  669,  671,  665,  667,  670,  664,  664,

      669,  671,    0,  667,  666,  667,  674,  673,  675,  676,
      677,  666,  672,  669,  734,  675,  667,  670,    0,  672,
      735,  671,  673,  667,    0,    0,  674,  673,  675,  676,
      677,  678,  681,  674,  673,  675,  676,  677,  736,  672,
      679,  734,  675,  679,  738,  678,  678,  735,  680,  673,
        0,  678,  681,  674,  673,  675,  676,  677,  678,  681,
      679,  680,  682,  683,  682,  736,    0,  679,  680,    0,
      679,  738,  678,  678,    0,  680,  687,  686,  678,  681,
      684,  685,  688,  683,  682,  686,  688,  679,  680,  682,
      683,  682,    0,  684,  685,  680,  687,  686,  689,  690,

      684,  685,  689,  687,  686,    0,  688,  684,  685,  688,
      683,  682,  686,  688,  739,    0,  740,    0,    0,  690,
      684,  685,  689,  687,  686,  689,  690,  684,  685,  689,
      691,  692,  693,  688,  695,  741,  696,  694,  691,    0,
      694,  739,  695,  740,  692,  696,  690,  693,    0,  689,
      691,  692,  693,  697,  695,  697,  696,  691,  692,  693,
      694,  695,  741,  696,  694,  691,  698,  694,  699,  695,
      701,  692,  696,    0,  693,  697,  703,  691,  692,  693,
      697,  695,  697,  696,  702,  700,  698,  694,  699,  700,
      701,    0,    0,  698,  702,  699,  703,  701,  704,  707,

      705,    0,  697,  703,  702,  700,    0,  708,  706,  708,
        0,  702,  700,  698,  705,  699,  700,  701,  704,  707,
      705,  702,  706,  703,  709,  704,  707,  705,  706,  708,
        0,  702,  700,  709,  708,  706,  708,  710,  711,  712,
        0,  705,  711,  714,  709,  704,  707,  705,  713,  706,
      713,  709,  742,  710,  712,  706,  708,  710,  715,  712,
      709,  715,  711,  714,  710,  711,  712,  717,  713,  711,
      714,  709,  716,  719,    0,  713,  716,  713,  715,  742,
      710,  712,  718,  744,  710,  715,  712,  717,  715,  711,
      714,  720,  716,  719,  717,  713,  721,  745,  718,  716,

      719,  722,  718,  716,  746,  715,  747,  748,  749,  718,
      744,  720,  750,  751,  717,  722,  721,  752,  720,  716,
      719,  722,  753,  721,  745,  718,  756,  757,  722,  718,
      759,  746,  762,  747,  748,  749,  765,  766,  720,  750,
      751,  768,  722,  721,  752,  773,  774,  767,  722,  753,
      767,  775,  776,  756,  757,  777,  780,  759,  781,  762,
      782,  783,  784,  765,  766,  786,  787,  788,  768,  789,
      790,  791,  773,  774,  767,  792,  793,  767,  775,  776,
      794,  795,  777,  780,  796,  781,  798,  782,  783,  784,
      799,  800,  786,  787,  788,  802,  789,  790,  791,  803,

      804,  805,  792,  793,  809,  810,  894,  794,  795,  811,
        0,  796,    0,  798,  812,  813,    0,  799,  800,  814,
      815,  817,  802,  817,  809,  810,  803,  804,  805,  811,
      811,  809,  810,  894,  812,  813,  811,  816,  816,  814,
      815,  812,  813,  817,    0,  896,  814,  815,  817,  820,
      817,  809,  810,  819,  818,  821,  811,  811,  816,  820,
        0,  812,  813,  818,  816,  816,  814,  815,  819,  820,
      817,  822,  896,  819,  818,  821,  820,  824,    0,  823,
      819,  818,  821,  823,  825,  816,  820,  824,  825,  827,
      818,  822,  897,  828,    0,  819,  820,  824,  822,  823,

      819,  818,  821,  829,  824,  826,  823,  829,  825,  827,
      823,  825,  826,  828,  824,  825,  827,  898,  822,  897,
      828,  832,  830,  829,  824,  826,  823,    0,    0,    0,
      829,    0,  826,  833,  829,  825,  827,  830,  831,  826,
      828,  832,  830,    0,  898,    0,  834,  831,  832,  830,
      829,  899,  826,  833,  838,  835,  838,  836,  831,  837,
      833,  834,    0,  837,  830,  831,  834,  839,  832,  830,
      835,  836,  840,  834,  831,  835,  838,  836,  899,  837,
      833,  838,  835,  838,  836,  831,  837,  839,  834,  842,
      837,  843,  840,  834,  839,  841,  842,  835,  836,  840,

      845,  846,  835,  838,  836,  844,  837,  844,  901,  842,
      841,  843,    0,  848,  839,  841,  842,    0,  843,  840,
      845,  846,  841,  842,  847,  844,  849,  845,  846,  851,
      850,    0,  844,  848,  844,  901,  842,  841,  843,  847,
      848,  852,  841,    0,  847,  850,  849,  845,  846,  851,
      850,  847,  844,  849,  854,  852,  851,  850,  852,  855,
      848,  852,    0,  853,  856,    0,  847,  857,  852,  858,
      853,  847,  850,  849,  854,  863,  851,  850,  859,  855,
        0,  854,  852,  853,  856,  852,  855,  857,  852,  858,
      853,  856,  859,  862,  857,  863,  858,  853,  859,  860,

        0,  854,  863,  860,  861,  859,  855,  861,  862,  864,
      853,  856,  865,  862,  857,    0,  858,  868,  903,  859,
      862,    0,  863,  860,  861,  859,  860,  870,  866,  864,
      860,  861,  865,  867,  861,  862,  864,  868,  869,  865,
      862,  866,  869,    0,  868,  903,  867,  870,  866,  904,
      860,  861,  874,  867,  870,  866,  864,  871,  869,  865,
      867,  871,  872,  905,  868,  869,  872,  874,  866,  869,
      873,  873,  874,  867,  870,  866,  904,    0,    0,  874,
      867,  871,  875,  875,  871,  869,  872,  877,  871,  872,
      905,  873,  876,  872,  874,    0,  876,  873,  873,  874,

      880,  877,  878,  875,  880,  879,  882,  877,  871,  875,
      875,    0,    0,  872,  877,  878,  876,  881,  873,  876,
      879,  881,  878,  876,  880,  879,  882,  880,  877,  878,
      875,  880,  879,  882,  877,  883,  884,  884,  885,  886,
      887,  881,  878,  876,  881,    0,  888,  879,  881,  878,
      888,  880,  879,  882,  887,  883,  891,  884,  885,  886,
      887,  906,  883,  884,  884,  885,  886,  887,  881,  889,
      888,  890,  892,  888,  908,  890,  891,  888,  889,  910,
      914,  887,  883,  891,  884,  885,  886,  887,  906,  889,
      916,  917,  892,  923,  924,  890,  889,  888,  890,  892,

      925,  908,  890,  891,  927,  889,  910,  914,  929,  930,
      932,  933,  934,  936,  937,  938,  889,  916,  917,  892,
      923,  924,  890,  939,  942,  944,  945,  925,  946,  947,
      952,  927,  953,  954,  956,  929,  930,  932,  933,  934,
      936,  937,  938,  957,  959,  962, 1021,  960,    0,  958,
      939,  942,  944,  945,  956,  946,  947,  952,  958,  953,
      954,  956,  960,  957,  959,  962,  961,  960,  963,  958,
      957,  959,  962, 1021,  960,  963,  958,  964, 1024,  965,
      961,  956,    0, 1025,    0,  958,  961,  965,  963,  960,
      957,  959,  962,  961,  960,  963,  958,  964,  966,  965,

      966,  967,  963,  968,  964, 1024,  965,  961,  967,  969,
     1025,  971,    0,  961,  965,  963,  970,  973,  968,  970,
      966,  967,  974,  968,  964,  966,  965,  966,  967,  969,
      968,  971,  972,  975,  972,  967,  969,  973,  971,  970,
        0,    0,  974,  970,  973,  968,  970,  966,  967,  974,
      968,  976,  977,  975,  972,  979,  969,  980,  971,  972,
      975,  972,    0,  981,  973,  978,  970,  982,  983,  974,
      979,  976,  977,  984,  978,  979,  985,  980,  976,  977,
      975,  972,  979,  981,  980,  978,  986,  982,  983,  985,
      981,  988,  978,  984,  982,  983,  985,  979,  976,  977,

      984,  978,  979,  985,  980,  987,  986,  989,  990,  987,
      981,  988,  978,  986,  982,  983,  985,  991,  988,    0,
      984,  989,  992,  985,  991,  993,  992,  989,  990,  987,
        0, 1028,  987,  986,  989,  990,  987,  991,  988,  995,
      996,  997,  994, 1029,  991,  993,  992,    0,  989,  992,
        0,  991,  993,  992,  989,  990,  987,  994, 1028,  995,
      996,  997,  994,  998,  991,  998,  995,  996,  997,  994,
     1029,    0,  993,  992,  999, 1002,  999, 1000, 1003, 1001,
        0,    0,    0, 1034,  994,  998,  995,  996,  997,  994,
      998, 1000,  998, 1001, 1035, 1002,  999, 1000, 1003, 1001,

        0,  999, 1002,  999, 1000, 1003, 1001, 1004, 1005, 1006,
     1034, 1038,  998, 1006, 1004, 1007,    0, 1009, 1000, 1007,
     1001, 1035, 1002,  999, 1000, 1003, 1001, 1004, 1005, 1008,
     1010, 1008, 1009, 1006, 1004, 1005, 1006, 1009, 1038, 1007,
     1006, 1004, 1007, 1011, 1009, 1012, 1007, 1013, 1014, 1039,
     1010, 1008, 1042,    0, 1004, 1005, 1008, 1010, 1008, 1009,
     1006, 1014,    0, 1011, 1009, 1012, 1007, 1013, 1014, 1015,
     1011, 1015, 1012, 1016, 1013, 1014, 1039, 1010, 1008, 1042,
     1016, 1043, 1047, 1048, 1049, 1050, 1055,    0, 1014, 1015,
     1011,    0, 1012, 1016, 1013, 1014, 1015, 1056, 1015, 1057,

     1016, 1058, 1059, 1060,    0, 1061, 1055, 1016, 1043, 1047,
     1048, 1049, 1050, 1055, 1062, 1063, 1015, 1056, 1062, 1057,
     1016, 1058, 1059, 1060, 1056, 1061, 1057, 1064, 1058, 1059,
     1060, 1065, 1061, 1055,    0, 1063, 1067, 1068, 1062, 1069,
     1066, 1062, 1063,    0, 1056, 1062, 1057, 1064, 1058, 1059,
     1060, 1065, 1061, 1070, 1064, 1066, 1067, 1068, 1065, 1069,
     1066, 1073, 1063, 1067, 1068, 1062, 1069, 1066, 1071, 1072,
     1071, 1074, 1075, 1070, 1064,    0, 1072,    0, 1065, 1092,
     1070, 1073, 1066, 1067, 1068, 1075, 1069, 1066, 1073, 1072,
     1071, 1074, 1075, 1076, 1077, 1071, 1072, 1071, 1074, 1075,

     1070, 1094, 1078, 1072, 1081,    0, 1092, 1082, 1073,    0,
     1079, 1097, 1075, 1076, 1077, 1083, 1072, 1071, 1074, 1075,
     1076, 1077, 1078, 1084, 1081, 1079, 1080, 1082, 1094, 1078,
     1079, 1081, 1080,    0, 1082, 1083, 1084, 1079, 1097, 1100,
     1076, 1077, 1083, 1084, 1087, 1086, 1080, 1085, 1088, 1078,
     1084, 1081, 1079, 1080, 1082, 1085, 1089, 1079, 1090, 1080,
     1086, 1103, 1083, 1084, 1087, 1086, 1100, 1085, 1088, 1104,
     1084, 1087, 1086, 1080, 1085, 1088, 1089, 1105, 1090, 1109,
     1108, 1111, 1085, 1089,    0, 1090,    0, 1086, 1103, 1112,
        0, 1087, 1086, 1108, 1085, 1088, 1104, 1110, 1113, 1109,

     1108, 1111, 1114, 1089, 1105, 1090, 1109, 1108, 1111, 1112,
     1115, 1117, 1110, 1113,    0, 1118, 1112, 1110, 1113, 1125,
     1108, 1116, 1114, 1119, 1110, 1113, 1109, 1108, 1111, 1114,
     1115, 1117, 1127, 1122, 1116, 1118, 1112, 1115, 1117, 1110,
     1113, 1116, 1118, 1119, 1110, 1113, 1125, 1121, 1116, 1114,
     1119, 1121, 1120, 1122, 1130, 1132, 1133, 1115, 1117, 1127,
     1122, 1116, 1118, 1120, 1134, 1136,    0, 1121, 1116, 1137,
     1119,    0, 1120, 1135, 1121, 1132, 1133, 1142, 1121, 1120,
     1122, 1130, 1132, 1133, 1134, 1136, 1144, 1135, 1138, 1137,
     1120, 1134, 1136, 1135, 1121,    0, 1137, 1145, 1138, 1120,

     1135, 1146, 1132, 1133, 1142,    0, 1144, 1150, 1138,    0,
     1146, 1134, 1136, 1144, 1135, 1138, 1137, 1145,    0,    0,
     1135, 1146,    0,    0, 1145, 1138,    0, 1150, 1146,    0,
        0,    0,    0, 1144, 1150, 1138,    0, 1146,    0,    0,
        0,    0,    0,    0, 1145,    0,    0,    0, 1146,    0,
        0,    0,    0,    0, 1150, 1170, 1170, 1170, 1170, 1170,
     1171,    0,    0, 1171, 1171, 1173, 1173, 1173,    0, 1173,
     1174,    0, 1174, 1174, 1174, 1175,    0, 1175, 1175, 1175,
     1176,    0, 1176, 1176, 1176, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "expr.h"
#include "bison_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2112 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2126 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 2413 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1170 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1169 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(CHARACTER)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(VARYING)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(SECONDS)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(MINUTES)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(HOURS)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(DAYS)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(MONTHS)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(YEARS)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 152:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 159:
#line 224 "flex_lexer.l"
case 160:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
{
  yylval->fval = atof(yytext);
  return SQL_FLOATVAL;
}
	YY_BREAK
/*
   * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no
   * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
   *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
   */
case 161:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
{
  yylval->ival = LLONG_MIN;
  return SQL_INTVAL;
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 239 "flex_lexer.l"
{
  errno = 0;
  yylval->ival = strtoll(yytext, nullptr, 0);
  if (errno) {
    return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
    return 0;
  }
  return SQL_INTVAL;
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 249 "flex_lexer.l"
{
  // Crop the leading and trailing quote char
  yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 255 "flex_lexer.l"
{
  yylval->sval = strdup(yytext);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 260 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 261 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 262 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 263 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 264 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 266 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 268 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3347 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1170 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1170 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1169);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 268 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

